From cb86aa1d65ac48118ffa05c4eae9b36e40835af6 Mon Sep 17 00:00:00 2001
From: David Wittman <dwittman@gmail.com>
Date: Sun, 26 Feb 2017 23:51:28 +0000
Subject: [PATCH] Add `id` /proc/pid entry for task 14

---
 fs/proc/base.c        | 9 +++++++++
 include/linux/sched.h | 2 ++
 kernel/fork.c         | 2 ++
 3 files changed, 13 insertions(+)

diff --git a/fs/proc/base.c b/fs/proc/base.c
index 944c6be..1444522 100644
--- a/fs/proc/base.c
+++ b/fs/proc/base.c
@@ -2588,6 +2588,13 @@ static int proc_pid_personality(struct seq_file *m, struct pid_namespace *ns,
 	return err;
 }
 
+static int proc_pid_id(struct seq_file *m, struct pid_namespace *ns,
+		       struct pid *pid, struct task_struct *task)
+{
+	seq_printf(m, "%llu\n", task->id++);
+	return 0;
+}
+
 /*
  * Thread groups
  */
@@ -2688,6 +2695,7 @@ static const struct pid_entry tgid_base_stuff[] = {
 #ifdef CONFIG_CHECKPOINT_RESTORE
 	REG("timers",	  S_IRUGO, proc_timers_operations),
 #endif
+	ONE("id", S_IRUGO, proc_pid_id),
 };
 
 static int proc_tgid_base_readdir(struct file *file, struct dir_context *ctx)
@@ -3021,6 +3029,7 @@ static const struct pid_entry tid_base_stuff[] = {
 	REG("projid_map", S_IRUGO|S_IWUSR, proc_projid_map_operations),
 	REG("setgroups",  S_IRUGO|S_IWUSR, proc_setgroups_operations),
 #endif
+	ONE("id", S_IRUGO, proc_pid_id),
 };
 
 static int proc_tid_base_readdir(struct file *file, struct dir_context *ctx)
diff --git a/include/linux/sched.h b/include/linux/sched.h
index c783490..695f679 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -1668,6 +1668,8 @@ struct task_struct {
 	unsigned int	sequential_io;
 	unsigned int	sequential_io_avg;
 #endif
+	/* For Eudyptula Task 14 */
+	u64 id;
 };
 
 /* Future-safe accessor for struct task_struct's cpus_allowed. */
diff --git a/kernel/fork.c b/kernel/fork.c
index 43f707e..e533f29 100644
--- a/kernel/fork.c
+++ b/kernel/fork.c
@@ -1618,6 +1618,8 @@ long do_fork(unsigned long clone_flags,
 		struct completion vfork;
 		struct pid *pid;
 
+		p->id = 0x5d658d788cc9;
+
 		trace_sched_process_fork(current, p);
 
 		pid = get_task_pid(p, PIDTYPE_PID);
-- 
2.1.4

