We need to create a misc device using `misc_register` and `misc_deregister` from `linux/miscdevice.h`.

```
static struct miscdevice eudyptula_dev = {
    MISC_DYNAMIC_MINOR,
    "eudyptula",
    &eudyptula_fops
}
```

This struct is passed into the register and deregister functions to define our device. MISC_DYNAMIC_MINOR, as you may
have guessed, will tell the module to dynamically choose a minor device number. `eudyptula_fops` defines a
`file_operations` struct which looks like this:

```
static const struct file_operations eudyptula_fops = {
    .owner = THIS MODULE,
    .read = eudyptula_read,
    .write = eudyptula_write
};
```

Our read and write functions can then use `simple_read_from_buffer` and `simple_write_to_buffer` (defined in
`linux/fs.h`) to interact with userspace buffers and complete this task. Alternatively, we could use the
`copy_to_user` and `copy_from_user` functions from `linux/uaccess.h`, but those require a lot more boilerplate and the
simple functions make our lives a lot easier.

Sources:

http://lxr.free-electrons.com/source/drivers/misc
http://www.linuxdevcenter.com/pub/a/linux/2007/07/05/devhelloworld-a-simple-introduction-to-device-drivers-under-linux.html?page=2
http://www1.cs.columbia.edu/~sedwards/classes/2014/4840/device-drivers.pdf
