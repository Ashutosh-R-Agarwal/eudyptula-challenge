# Notes

LIST_HEAD_INIT is a static initializer, INIT_LIST_HEAD is a function. They both initialise a list_head to be empty.

If you are statically declaring a list_head, you should use LIST_HEAD_INIT, eg:

    static struct list_head mylist = LIST_HEAD_INIT(mylist);

You should use INIT_LIST_HEAD() for a list head that is dynamically allocated, usually part of another structure. There are many examples in the kernel source.

---

Use kmalloc (linux/slab.h) for memory allocation

    ptr = kmalloc(sizeof(struct dog), GFP_KERNEL);

What is GFP_KERNEL?

  > This is a normal allocation and might block. This is the flag to use in process context code when it is safe to sleep. The kernel will do whatever it has to in order to obtain the memory requested by the caller. This flag should be your first choice.

# Resources
 - https://kernelnewbies.org/FAQ/LinkedLists
 - http://www.makelinux.net/ldd3/chp-11-sect-5
 - https://isis.poly.edu/kulesh/stuff/src/klist/
 - http://www.makelinux.net/books/lkd2/ch11lev1sec4
