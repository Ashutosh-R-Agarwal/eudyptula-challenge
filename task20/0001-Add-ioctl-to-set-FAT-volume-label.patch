From b9bd6452ec897e1e485f7797335d56a31a8dde1c Mon Sep 17 00:00:00 2001
From: root <root@debian-jessie.vagrantup.com>
Date: Sat, 14 Jul 2018 22:53:20 +0000
Subject: [PATCH] Add ioctl to set FAT volume label

Signed-off-by: David Wittman <dwittman@gmail.com>
---
 fs/fat/dir.c                  | 141 ++++++++++++++++++++++++++++++++++++++++++
 include/uapi/linux/msdos_fs.h |   1 +
 2 files changed, 142 insertions(+)

diff --git a/fs/fat/dir.c b/fs/fat/dir.c
index 75bf5e7..502e00e 100644
--- a/fs/fat/dir.c
+++ b/fs/fat/dir.c
@@ -460,6 +460,140 @@ static int fat_parse_short(struct super_block *sb,
 	return name_len;
 }
 
+int fat_scan_volume_label(struct inode *inode, struct fat_slot_info *sinfo)
+{
+	struct super_block *sb = inode->i_sb;
+
+	sinfo->slot_off = 0;
+	sinfo->bh = NULL;
+	while (fat_get_entry(inode, &sinfo->slot_off, &sinfo->bh,
+				&sinfo->de) >= 0) {
+		/* VFAT long filenames include the ATTR_VOLUME flag, so we
+		 * cannot just check for ATTR_VOLUME here
+		 */
+		if (sinfo->de->attr != ATTR_EXT  && (sinfo->de->attr & ATTR_VOLUME)) {
+			sinfo->slot_off -= sizeof(*sinfo->de);
+			sinfo->nr_slots = 1;
+			sinfo->i_pos = fat_make_i_pos(sb, sinfo->bh, sinfo->de);
+			return 0;
+		}
+	}
+	return -ENOENT;
+}
+
+static int fat_ioctl_set_volume_label(struct inode *inode,
+				      unsigned long __user user_arg)
+{
+	struct super_block *sb = inode->i_sb;
+	struct msdos_sb_info *sbi = MSDOS_SB(inode->i_sb);
+	struct fat_slot_info sinfo;
+	struct msdos_dir_entry de;
+	struct buffer_head *bh, *backup_bh;
+	struct fat_boot_sector *b, *backup_bs;
+	unsigned char new_label[MSDOS_NAME];
+	struct timespec ts;
+	struct inode *lbl_i;
+	__le16 time, date;
+	int new_label_len, err;
+
+	new_label_len = strlen_user((char *)user_arg);
+
+	if (new_label_len > MSDOS_NAME) {
+		fat_msg(sb, KERN_ERR, "illegal volume label length");
+		return -EINVAL;
+	}
+
+	if (copy_from_user(new_label, (unsigned char *)user_arg, new_label_len))
+		return -EFAULT;
+
+	fat_time_unix2fat(sbi, &ts, &time, &date, NULL);
+
+	if (!fat_scan_volume_label(inode, &sinfo)) {
+		/* Label exists, overwrite it */
+		mutex_lock(&sbi->s_lock);
+		memcpy(&sinfo.de->name, new_label, new_label_len);
+		lbl_i = fat_build_inode(sb, sinfo.de, sinfo.i_pos);
+		lbl_i->i_atime = ts;
+		lbl_i->i_mtime = ts;
+		mark_inode_dirty(lbl_i);
+		iput(lbl_i);
+		mutex_unlock(&sbi->s_lock);
+	} else {
+		/* Create a new directory entry for the label */
+		memset(&de, '\0', sizeof(de));
+		memcpy(de.name, new_label, new_label_len);
+		de.attr = ATTR_VOLUME;
+		de.lcase = 0;
+		ts = current_kernel_time();
+		de.cdate = de.adate = 0;
+		de.ctime = 0;
+		de.ctime_cs = 0;
+		de.time = time;
+		de.date = date;
+		fat_set_start(&de, 0);
+		de.size = 0;
+
+		mutex_lock(&sbi->s_lock);
+		err = fat_add_entries(inode, &de, 1, &sinfo);
+		mutex_unlock(&sbi->s_lock);
+
+		if (err)
+			return err;
+	}
+
+	inode->i_ctime = ts;
+	inode->i_mtime = ts;
+	inode->i_version++;
+
+	if (IS_DIRSYNC(inode))
+		(void)fat_sync_inode(inode);
+	else
+		mark_inode_dirty(inode);
+
+	/* do not change any thing if mounted read only */
+	if ((sb->s_flags & MS_RDONLY))
+		return 0;
+
+	/* do not change if fs was dirty */
+	if (sbi->dirty)
+		return -1;
+
+	bh = sb_bread(sb, 0);
+	if (bh == NULL) {
+		fat_msg(sb, KERN_ERR, "unable to read boot sector "
+			"to mark fs as dirty");
+		return -1;
+	}
+
+	b = (struct fat_boot_sector *) bh->b_data;
+
+	if (sbi->fat_bits == 32) {
+		memcpy(b->fat32.vol_label, new_label, new_label_len);
+		b->fat32.vol_label[new_label_len] = '\0';
+
+		backup_bh = sb_bread(sb, b->fat32.backup_boot);
+		if (backup_bh) {
+			backup_bs = (struct fat_boot_sector *) backup_bh->b_data;
+			memcpy(backup_bs->fat32.vol_label, new_label,
+				new_label_len);
+			backup_bs->fat32.vol_label[new_label_len] = '\0';
+
+			mark_buffer_dirty(backup_bh);
+			sync_dirty_buffer(backup_bh);
+			brelse(backup_bh);
+		}
+	} else {
+		memcpy(b->fat16.vol_label, new_label, new_label_len);
+		b->fat16.vol_label[new_label_len] = '\0';
+	}
+
+	mark_buffer_dirty(bh);
+	sync_dirty_buffer(bh);
+	brelse(bh);
+
+	return 0;
+}
+
 /*
  * Return values: negative -> error/not found, 0 -> found.
  */
@@ -802,6 +936,9 @@ static long fat_dir_ioctl(struct file *filp, unsigned int cmd,
 		short_only = 0;
 		both = 1;
 		break;
+	case FAT_IOCTL_SET_VOLUME_LABEL:
+		return fat_ioctl_set_volume_label(inode->i_sb->s_root->d_inode,
+							arg);
 	default:
 		return fat_generic_ioctl(filp, cmd, arg);
 	}
@@ -823,6 +960,7 @@ static long fat_dir_ioctl(struct file *filp, unsigned int cmd,
 #ifdef CONFIG_COMPAT
 #define	VFAT_IOCTL_READDIR_BOTH32	_IOR('r', 1, struct compat_dirent[2])
 #define	VFAT_IOCTL_READDIR_SHORT32	_IOR('r', 2, struct compat_dirent[2])
+#define FAT_IOCTL_SET_VOLUME_LABEL32	_IOW('r', 0x14, char *)
 
 FAT_IOCTL_FILLDIR_FUNC(fat_compat_ioctl_filldir, compat_dirent)
 
@@ -842,6 +980,9 @@ static long fat_compat_dir_ioctl(struct file *filp, unsigned cmd,
 		short_only = 0;
 		both = 1;
 		break;
+	case FAT_IOCTL_SET_VOLUME_LABEL32:
+		return fat_ioctl_set_volume_label(inode->i_sb->s_root->d_inode,
+							(unsigned long) arg);
 	default:
 		return fat_generic_ioctl(filp, cmd, (unsigned long)arg);
 	}
diff --git a/include/uapi/linux/msdos_fs.h b/include/uapi/linux/msdos_fs.h
index e284ff9..f731066 100644
--- a/include/uapi/linux/msdos_fs.h
+++ b/include/uapi/linux/msdos_fs.h
@@ -106,6 +106,7 @@ struct __fat_dirent {
 #define FAT_IOCTL_SET_ATTRIBUTES	_IOW('r', 0x11, __u32)
 /*Android kernel has used 0x12, so we use 0x13*/
 #define FAT_IOCTL_GET_VOLUME_ID		_IOR('r', 0x13, __u32)
+#define FAT_IOCTL_SET_VOLUME_LABEL	_IOW('r', 0x14, char *)
 
 struct fat_boot_sector {
 	__u8	ignored[3];	/* Boot strap short or near jump */
-- 
2.1.4

