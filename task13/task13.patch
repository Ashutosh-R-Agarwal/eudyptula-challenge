--- task12/task12.c	2017-02-17 22:27:25.921810823 -0600
+++ task13/task13.c	2017-02-18 00:26:29.218020009 -0600
@@ -1,7 +1,8 @@
 /*
- * Eudyptula Challenge: Task 12
+ * Eudyptula Challenge: Task 13
  *
- * Create a linked list using the kernel's list implementation
+ * Create a linked list using the kernel's list implementation,
+ * but use the slab cache instead.
  *
  */
 
@@ -17,10 +18,12 @@
 
 MODULE_LICENSE("GPL");
 MODULE_AUTHOR("David Wittman");
-MODULE_DESCRIPTION("Eudyptula Challenge Task 12");
+MODULE_DESCRIPTION("Eudyptula Challenge Task 13");
 
 #define IDENTITY_NAME_LEN 20
 
+static struct kmem_cache *identity_cache;
+
 struct identity {
 	char name[IDENTITY_NAME_LEN];
 	int id;
@@ -32,9 +35,9 @@
 
 static int identity_create(char *name, int id)
 {
-	struct identity *i = kmalloc(sizeof(struct identity), GFP_KERNEL);
+	struct identity *i = kmem_cache_alloc(identity_cache, GFP_KERNEL);
 
-	if (i == NULL)
+	if (!i)
 		return -ENOMEM;
 
 	strncpy(i->name, name, IDENTITY_NAME_LEN);
@@ -64,7 +67,7 @@
 
 	if (i != NULL) {
 		list_del(&i->list);
-		kfree(i);
+		kmem_cache_free(identity_cache, i);
 	}
 }
 
@@ -73,6 +76,11 @@
 	int retval = 0;
 	struct identity *temp;
 
+	identity_cache = kmem_cache_create("funky_buttlovin",
+		sizeof(struct identity), 0, 0, NULL);
+	if (!identity_cache)
+		return -ENOMEM;
+
 	retval = identity_create("Alice", 1);
 	if (retval)
 		return retval;
